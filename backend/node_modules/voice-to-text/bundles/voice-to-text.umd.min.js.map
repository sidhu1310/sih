{
  "version": 3,
  "file": "voice-to-text.umd.min.js",
  "sources": [
    "ng://voice-to-text/out/app/services/speechservice.ts",
    "ng://voice-to-text/out/app/modules/input/input.component.ts",
    "ng://voice-to-text/out/app/modules/input/input.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\ninterface IWindow extends Window {\n    webkitSpeechRecognition: any;\n    SpeechRecognition: any;\n}\n\n@Injectable()\nexport class SpeechRecognitionService {\n    speechRecognition: any;\n\n    constructor(private zone: NgZone) {\n    }\n\n    record(): Observable<any> {\n      return Observable.create(observer => {\n            const { webkitSpeechRecognition }: IWindow = <IWindow>window;\n            this.speechRecognition = new webkitSpeechRecognition();\n            this.speechRecognition.continuous = true;\n            this.speechRecognition.lang = 'en-us';\n            this.speechRecognition.maxAlternatives = 1;\n\n            this.speechRecognition.onresult = speech => {\n                let term = '';\n                if (speech.results) {\n                    const result = speech.results[speech.resultIndex];\n                    const transcript = result[0].transcript;\n                    if (result.isFinal) {\n                        if (result[0].confidence < 0.3) {\n                            console.log('Unrecognized result - Please try again');\n                        } else {\n                          term = transcript;\n                        }\n                    }\n                }\n                this.zone.run(() => {\n                    observer.next(term);\n                });\n            };\n\n            this.speechRecognition.onerror = error => {\n                observer.error(error);\n            };\n\n            this.speechRecognition.onend = () => {\n                observer.complete();\n            };\n\n            this.speechRecognition.start();\n        });\n    }\n    stop = () => {\n      this.speechRecognition.stop();\n    }\n\n}\n",
    "import { Component, OnInit, Input,\n  Output, EventEmitter } from '@angular/core';\nimport { SpeechRecognitionService } from '../../services/speechservice';\n\n@Component({\n  selector: 'app-input',\n  template: `<div>\n  <ng-content></ng-content>\n  <div\n    class=\"boxHolder\"\n  >\n    <input\n      *ngIf=\"showInput\"\n      [(ngModel)]=\"search_text\"\n      class=\"inputBox\"\n      autofocus\n    />\n    <div\n      [ngClass]=\"showInput ? 'indicator' : 'floatingIndicator'\"\n    >\n      <img\n        class=\"mike\"\n        (click)=\"triggerMike()\"\n        src=\"assets/mike.png\"\n      />\n      <div class=\"spinner\" *ngIf=\"blink\"></div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`@-webkit-keyframes spin{from{opacity:0}to{opacity:.9}}@keyframes spin{from{opacity:0}to{opacity:.9}}.spinner{width:25px;height:25px;border-radius:100%;background-color:red;-webkit-animation-name:spin;animation-name:spin;-webkit-animation-duration:2s;animation-duration:2s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:linear;animation-timing-function:linear}.inputBox{height:35px;line-height:25px;padding:5px;border-radius:4px;border:1px solid #d8d8d8;display:inline-block;width:95%;font-size:1rem}.boxHolder{position:relative}.indicator{position:absolute;top:10px;right:60px;display:-webkit-box;display:-ms-flexbox;display:flex}.indicator>.mike{width:20px;height:20px;position:relative}.indicator>.spinner{position:absolute;top:-1px;right:-3px}.floatingIndicator>.mike{width:20px;height:20px;position:relative}.floatingIndicator>.spinner{position:absolute;top:-1px;left:-3px}`]\n})\n\nexport class InputComponent implements OnInit {\n  public search_text = '';\n  public blink = false;\n  @Output() spokenText = new EventEmitter<string>();\n  @Output() error = new EventEmitter<string>();\n  @Input() showInput = true;\n  constructor(\n    private speech: SpeechRecognitionService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  triggerMike() {\n    if (!('webkitSpeechRecognition' in window)) {\n      console.log('please upgrade');\n    } else {\n      this.search_text = '';\n      this.blink = true;\n      this.search();\n    }\n  }\n\n  search(): void {\n    this.speech.record().subscribe((text) => {\n        this.search_text = text;\n        this.blink = false;\n        this.spokenText.emit(this.search_text);\n        this.speech.stop();\n      },\n      (err) => {\n        this.error.emit('Failed in Fetching');\n        if (err.error === 'no-speech') {\n          this.search();\n        }\n      }\n    );\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputComponent } from './input.component';\nimport { SpeechRecognitionService } from '../../services/speechservice';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [InputComponent],\n  exports: [InputComponent],\n  providers: [\n    SpeechRecognitionService\n  ]\n})\nexport class InputModule { }\n"
  ],
  "names": [
    "SpeechRecognitionService",
    "zone",
    "_this",
    "this",
    "stop",
    "speechRecognition",
    "prototype",
    "record",
    "Observable",
    "create",
    "observer",
    "webkitSpeechRecognition",
    "continuous",
    "lang",
    "maxAlternatives",
    "onresult",
    "speech",
    "term",
    "results",
    "result",
    "resultIndex",
    "transcript",
    "isFinal",
    "confidence",
    "console",
    "log",
    "run",
    "next",
    "onerror",
    "error",
    "onend",
    "complete",
    "start",
    "type",
    "Injectable",
    "NgZone",
    "InputComponent",
    "search_text",
    "blink",
    "spokenText",
    "EventEmitter",
    "showInput",
    "ngOnInit",
    "triggerMike",
    "window",
    "search",
    "subscribe",
    "text",
    "emit",
    "err",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "Output",
    "Input",
    "InputModule",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "declarations",
    "exports",
    "providers"
  ],
  "mappings": "+aAAA,IAAAA,EAAA,WAYI,SAAJA,EAAwBC,GAApB,IAAJC,EAAAC,KAAwBA,KAAxBF,KAAwBA,EAwCxBE,KAAAC,KAAW,WACLF,EAAKG,kBAAkBD,eAtCzBJ,EAAJM,UAAAC,OAAI,WAAA,IAAJL,EAAAC,KACM,OAAOK,EAAAA,WAAWC,OAAO,SAAAC,GACX,IAAAC,EAApB,OAAAA,wBACYT,EAAKG,kBAAoB,IAAIM,EAC7BT,EAAKG,kBAAkBO,YAAa,EACpCV,EAAKG,kBAAkBQ,KAAO,QAC9BX,EAAKG,kBAAkBS,gBAAkB,EAEzCZ,EAAKG,kBAAkBU,SAAW,SAAAC,GAC9B,IAAIC,EAAO,GACX,GAAID,EAAOE,QAAS,CAChB,IAAMC,EAASH,EAAOE,QAAQF,EAAOI,aAC/BC,EAAaF,EAAO,GAAGE,WACzBF,EAAOG,UACHH,EAAO,GAAGI,WAAa,GACvBC,QAAQC,IAAI,0CAEdR,EAAOI,GAIjBnB,EAAKD,KAAKyB,IAAI,WACVhB,EAASiB,KAAKV,MAItBf,EAAKG,kBAAkBuB,QAAU,SAAAC,GAC7BnB,EAASmB,MAAMA,IAGnB3B,EAAKG,kBAAkByB,MAAQ,WAC3BpB,EAASqB,YAGb7B,EAAKG,kBAAkB2B,aAjDnC,iBAQA,CAAAC,KAACC,EAAAA,gDARD,CAAAD,KAAqBE,EAAAA,UCArB,IAAAC,EAAA,WAuCE,SAAFA,EACYpB,GAAAb,KAAZa,OAAYA,EANZb,KAAAkC,YAAuB,GACvBlC,KAAAmC,OAAiB,EACjBnC,KAAAoC,WAAyB,IAAIC,EAAAA,aAC7BrC,KAAA0B,MAAoB,IAAIW,EAAAA,aACxBrC,KAAAsC,WAAuB,SAKrBL,EAAF9B,UAAAoC,SAAE,aAGAN,EAAF9B,UAAAqC,YAAE,WACQ,4BAA6BC,QAGjCzC,KAAKkC,YAAc,GACnBlC,KAAKmC,OAAQ,EACbnC,KAAK0C,UAJLrB,QAAQC,IAAI,mBAQhBW,EAAF9B,UAAAuC,OAAE,WAAA,IAAF3C,EAAAC,KACIA,KAAKa,OAAOT,SAASuC,UAAU,SAACC,GAC5B7C,EAAKmC,YAAcU,EACnB7C,EAAKoC,OAAQ,EACbpC,EAAKqC,WAAWS,KAAK9C,EAAKmC,aAC1BnC,EAAKc,OAAOZ,QAEd,SAAC6C,GACC/C,EAAK2B,MAAMmB,KAAK,sBACE,cAAdC,EAAIpB,OACN3B,EAAK2C,cAlEf,iBAIA,CAAAZ,KAACiB,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,YACVC,SAAU,mdAwBVC,OAAQ,CAAC,y9BA5BX,CAAArB,KAASjC,uBAkCTuC,WAAA,CAAA,CAAAN,KAAGsB,EAAAA,SACH1B,MAAA,CAAA,CAAAI,KAAGsB,EAAAA,SACHd,UAAA,CAAA,CAAAR,KAAGuB,EAAAA,SCtCH,IAAAC,EAAA,2BAMA,CAAAxB,KAACyB,EAAAA,SAADP,KAAA,CAAU,CACRQ,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAEFC,aAAc,CAAC1B,GACf2B,QAAS,CAAC3B,GACV4B,UAAW,CACThE"
}
