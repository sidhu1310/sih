{
  "version": 3,
  "file": "voice-to-text.js",
  "sources": [
    "ng://voice-to-text/out/app/modules/input/input.module.ts",
    "ng://voice-to-text/out/app/modules/input/input.component.ts",
    "ng://voice-to-text/out/app/services/speechservice.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputComponent } from './input.component';\nimport { SpeechRecognitionService } from '../../services/speechservice';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [InputComponent],\n  exports: [InputComponent],\n  providers: [\n    SpeechRecognitionService\n  ]\n})\nexport class InputModule { }\n",
    "import { Component, OnInit, Input,\n  Output, EventEmitter } from '@angular/core';\nimport { SpeechRecognitionService } from '../../services/speechservice';\n\n@Component({\n  selector: 'app-input',\n  template: `<div>\n  <ng-content></ng-content>\n  <div\n    class=\"boxHolder\"\n  >\n    <input\n      *ngIf=\"showInput\"\n      [(ngModel)]=\"search_text\"\n      class=\"inputBox\"\n      autofocus\n    />\n    <div\n      [ngClass]=\"showInput ? 'indicator' : 'floatingIndicator'\"\n    >\n      <img\n        class=\"mike\"\n        (click)=\"triggerMike()\"\n        src=\"assets/mike.png\"\n      />\n      <div class=\"spinner\" *ngIf=\"blink\"></div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`@-webkit-keyframes spin{from{opacity:0}to{opacity:.9}}@keyframes spin{from{opacity:0}to{opacity:.9}}.spinner{width:25px;height:25px;border-radius:100%;background-color:red;-webkit-animation-name:spin;animation-name:spin;-webkit-animation-duration:2s;animation-duration:2s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:linear;animation-timing-function:linear}.inputBox{height:35px;line-height:25px;padding:5px;border-radius:4px;border:1px solid #d8d8d8;display:inline-block;width:95%;font-size:1rem}.boxHolder{position:relative}.indicator{position:absolute;top:10px;right:60px;display:-webkit-box;display:-ms-flexbox;display:flex}.indicator>.mike{width:20px;height:20px;position:relative}.indicator>.spinner{position:absolute;top:-1px;right:-3px}.floatingIndicator>.mike{width:20px;height:20px;position:relative}.floatingIndicator>.spinner{position:absolute;top:-1px;left:-3px}`]\n})\n\nexport class InputComponent implements OnInit {\n  public search_text = '';\n  public blink = false;\n  @Output() spokenText = new EventEmitter<string>();\n  @Output() error = new EventEmitter<string>();\n  @Input() showInput = true;\n  constructor(\n    private speech: SpeechRecognitionService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  triggerMike() {\n    if (!('webkitSpeechRecognition' in window)) {\n      console.log('please upgrade');\n    } else {\n      this.search_text = '';\n      this.blink = true;\n      this.search();\n    }\n  }\n\n  search(): void {\n    this.speech.record().subscribe((text) => {\n        this.search_text = text;\n        this.blink = false;\n        this.spokenText.emit(this.search_text);\n        this.speech.stop();\n      },\n      (err) => {\n        this.error.emit('Failed in Fetching');\n        if (err.error === 'no-speech') {\n          this.search();\n        }\n      }\n    );\n  }\n\n}\n",
    "import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\ninterface IWindow extends Window {\n    webkitSpeechRecognition: any;\n    SpeechRecognition: any;\n}\n\n@Injectable()\nexport class SpeechRecognitionService {\n    speechRecognition: any;\n\n    constructor(private zone: NgZone) {\n    }\n\n    record(): Observable<any> {\n      return Observable.create(observer => {\n            const { webkitSpeechRecognition }: IWindow = <IWindow>window;\n            this.speechRecognition = new webkitSpeechRecognition();\n            this.speechRecognition.continuous = true;\n            this.speechRecognition.lang = 'en-us';\n            this.speechRecognition.maxAlternatives = 1;\n\n            this.speechRecognition.onresult = speech => {\n                let term = '';\n                if (speech.results) {\n                    const result = speech.results[speech.resultIndex];\n                    const transcript = result[0].transcript;\n                    if (result.isFinal) {\n                        if (result[0].confidence < 0.3) {\n                            console.log('Unrecognized result - Please try again');\n                        } else {\n                          term = transcript;\n                        }\n                    }\n                }\n                this.zone.run(() => {\n                    observer.next(term);\n                });\n            };\n\n            this.speechRecognition.onerror = error => {\n                observer.error(error);\n            };\n\n            this.speechRecognition.onend = () => {\n                observer.complete();\n            };\n\n            this.speechRecognition.start();\n        });\n    }\n    stop = () => {\n      this.speechRecognition.stop();\n    }\n\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
