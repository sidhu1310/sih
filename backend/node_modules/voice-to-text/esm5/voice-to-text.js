import { Injectable, NgZone, Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

var SpeechRecognitionService = /** @class */ (function () {
    function SpeechRecognitionService(zone) {
        var _this = this;
        this.zone = zone;
        this.stop = function () {
            _this.speechRecognition.stop();
        };
    }
    SpeechRecognitionService.prototype.record = function () {
        var _this = this;
        return Observable.create(function (observer) {
            var webkitSpeechRecognition = (window).webkitSpeechRecognition;
            _this.speechRecognition = new webkitSpeechRecognition();
            _this.speechRecognition.continuous = true;
            _this.speechRecognition.lang = 'en-us';
            _this.speechRecognition.maxAlternatives = 1;
            _this.speechRecognition.onresult = function (speech) {
                var term = '';
                if (speech.results) {
                    var result = speech.results[speech.resultIndex];
                    var transcript = result[0].transcript;
                    if (result.isFinal) {
                        if (result[0].confidence < 0.3) {
                            console.log('Unrecognized result - Please try again');
                        }
                        else {
                            term = transcript;
                        }
                    }
                }
                _this.zone.run(function () {
                    observer.next(term);
                });
            };
            _this.speechRecognition.onerror = function (error) {
                observer.error(error);
            };
            _this.speechRecognition.onend = function () {
                observer.complete();
            };
            _this.speechRecognition.start();
        });
    };
    return SpeechRecognitionService;
}());
SpeechRecognitionService.decorators = [
    { type: Injectable },
];
SpeechRecognitionService.ctorParameters = function () { return [
    { type: NgZone, },
]; };
var InputComponent = /** @class */ (function () {
    function InputComponent(speech) {
        this.speech = speech;
        this.search_text = '';
        this.blink = false;
        this.spokenText = new EventEmitter();
        this.error = new EventEmitter();
        this.showInput = true;
    }
    InputComponent.prototype.ngOnInit = function () {
    };
    InputComponent.prototype.triggerMike = function () {
        if (!('webkitSpeechRecognition' in window)) {
            console.log('please upgrade');
        }
        else {
            this.search_text = '';
            this.blink = true;
            this.search();
        }
    };
    InputComponent.prototype.search = function () {
        var _this = this;
        this.speech.record().subscribe(function (text) {
            _this.search_text = text;
            _this.blink = false;
            _this.spokenText.emit(_this.search_text);
            _this.speech.stop();
        }, function (err) {
            _this.error.emit('Failed in Fetching');
            if (err.error === 'no-speech') {
                _this.search();
            }
        });
    };
    return InputComponent;
}());
InputComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-input',
                template: "<div>\n  <ng-content></ng-content>\n  <div\n    class=\"boxHolder\"\n  >\n    <input\n      *ngIf=\"showInput\"\n      [(ngModel)]=\"search_text\"\n      class=\"inputBox\"\n      autofocus\n    />\n    <div\n      [ngClass]=\"showInput ? 'indicator' : 'floatingIndicator'\"\n    >\n      <img\n        class=\"mike\"\n        (click)=\"triggerMike()\"\n        src=\"assets/mike.png\"\n      />\n      <div class=\"spinner\" *ngIf=\"blink\"></div>\n    </div>\n  </div>\n</div>\n",
                styles: ["@-webkit-keyframes spin{from{opacity:0}to{opacity:.9}}@keyframes spin{from{opacity:0}to{opacity:.9}}.spinner{width:25px;height:25px;border-radius:100%;background-color:red;-webkit-animation-name:spin;animation-name:spin;-webkit-animation-duration:2s;animation-duration:2s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:linear;animation-timing-function:linear}.inputBox{height:35px;line-height:25px;padding:5px;border-radius:4px;border:1px solid #d8d8d8;display:inline-block;width:95%;font-size:1rem}.boxHolder{position:relative}.indicator{position:absolute;top:10px;right:60px;display:-webkit-box;display:-ms-flexbox;display:flex}.indicator>.mike{width:20px;height:20px;position:relative}.indicator>.spinner{position:absolute;top:-1px;right:-3px}.floatingIndicator>.mike{width:20px;height:20px;position:relative}.floatingIndicator>.spinner{position:absolute;top:-1px;left:-3px}"]
            },] },
];
InputComponent.ctorParameters = function () { return [
    { type: SpeechRecognitionService, },
]; };
InputComponent.propDecorators = {
    "spokenText": [{ type: Output },],
    "error": [{ type: Output },],
    "showInput": [{ type: Input },],
};
var InputModule = /** @class */ (function () {
    function InputModule() {
    }
    return InputModule;
}());
InputModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [InputComponent],
                exports: [InputComponent],
                providers: [
                    SpeechRecognitionService
                ]
            },] },
];

export { InputModule, InputComponent as ɵa, SpeechRecognitionService as ɵb };
//# sourceMappingURL=voice-to-text.js.map
